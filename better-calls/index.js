(function(exports,metro,common,lazy,ui,api,plugin){"use strict";function _class_call_check(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError("Cannot call a class as a function")}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,"value"in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}function _create_class(Constructor,protoProps,staticProps){return protoProps&&_defineProperties(Constructor.prototype,protoProps),Constructor}function _define_property(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}var StorageManager=function(){function StorageManager2(options){if(_class_call_check(this,StorageManager2),_define_property(this,"_storage",void 0),_define_property(this,"_migrations",void 0),_define_property(this,"version",void 0),this._storage=options.storage,this.version=options.version,this._migrations=options.migrations,!this._storage.version){var newStorage=options.initialize();for(var key in newStorage)this._storage[key]=newStorage[key]}if(this.version<this._storage.version)throw new Error("The supported version is lower than the current storage version");this.version>this._storage.version&&this.migrate()}return _create_class(StorageManager2,[{key:"migrate",value:function(){for(var migrationStorage=this._storage,currentVersion=migrationStorage.version;currentVersion<this.version;currentVersion++){var migration=this._migrations[currentVersion];migrationStorage=migration(migrationStorage),migrationStorage.version=currentVersion+1}for(var key in migrationStorage)this._storage[key]=migrationStorage[key]}},{key:"set",value:function(path,value){for(var currentNode=this._storage,steps=path.split("."),i=0;i<steps.length;i++){var nextKey=steps[i];if(i===steps.length-1)currentNode[nextKey]=value;else if(nextKey in currentNode)currentNode=currentNode[nextKey];else{var node={};currentNode[nextKey]=node,currentNode=node}}return this}},{key:"get",value:function(path){var currentNode;for(var nextKey of path.split(".")){var node=currentNode??this._storage;if(nextKey in node)currentNode=node[nextKey];else return}return currentNode}},{key:"getFirstDefined",value:function(...paths){for(var path of paths){var value=this.get(path);if(value!==void 0)return value}}},{key:"setIfNotDefined",value:function(path,valueCb){return this.get(path)===void 0&&this.set(path,valueCb()),this}},{key:"unset",value:function(path){for(var currentNode,steps=path.split("."),i=0;i<steps.length;i++){var nextKey=steps[i];if(i===steps.length-1)return delete currentNode[nextKey],!0;var node=currentNode??this._storage;if(nextKey in node)currentNode=node[nextKey];else return!1}}}]),StorageManager2}(),findPropLazy=prop=>lazy.proxyLazy(()=>metro.findByPropsLazy(prop)[prop]),{resolveSemanticColor,semanticColors}=ui.color;metro.findByStoreNameLazy("ThemeStore");var TextStyleSheet=findPropLazy("TextStyleSheet");lazy.proxyLazy(()=>metro.findByPropsLazy("useSafeAreaInsets").SafeAreaView);var{Button,IconButton,TableRow,TableRowTrailingText,TableRowGroup,TableSwitchRow,TableSwitch,TableRadioRow,TableRadioGroup,TableCheckbox,TextInput}=metro.findByPropsLazy("Button","IconButton","TableRow"),{ActionSheet}=metro.findByProps("ActionSheet");metro.findByProps("ActionSheetRow");var BottomSheetTitleHeader=findPropLazy("BottomSheetTitleHeader");lazy.lazyDestructure(()=>metro.findByPropsLazy("FormSwitch","FormRadio","FormCheckbox"));function Text(props){var{children,variant,color,style,lineClamp=0}=props;return React.createElement(common.ReactNative.Text,{...props,style:[variant?TextStyleSheet[variant]:{},color?{color:resolveSemanticColor(semanticColors[color])}:{},style??{}],numberOfLines:lineClamp},children)}function TextLink(props){return React.createElement(Text,{variant:"text-xs/medium",color:"TEXT_LINK",accessible:!0,accessibilityRole:"link",onPress:()=>common.ReactNative.Linking.openURL(props.url)},props.children)}var Stack=findPropLazy("Stack");findPropLazy("FlashList");var Repository={FeatureRequestURL:"https://github.com/PalmDevs/revenge-plugins/issues/new?assignees=&labels=feature-request&projects=&template=suggestion.yml&title=Plugin+name%3A+Short+description"},Constants={Repository},actionSheet=metro.findByPropsLazy("openLazy","hideActionSheet");findPropLazy("showSimpleActionSheet");function showActionSheet(key,sheetObjectOrLazyImportedSheet,props){actionSheet.openLazy(sheetObjectOrLazyImportedSheet,key,{})}function AudioOutputDevicesSelectionSheet({onPress,storage:storage2,fromVoiceCall}){var devices=getAudioDevices();return React.createElement(ActionSheet,null,React.createElement(common.ReactNative.View,null,React.createElement(Stack,{spacing:16},React.createElement(BottomSheetTitleHeader,{title:"Select Preferred Audio Output Device"}),React.createElement(Stack,{spacing:12},React.createElement(TableRadioGroup,{title:"Audio Devices",hasIcons:!0,value:storage2.get("rememberOutputDevice.device.deviceId"),onChange:deviceId=>{var device=devices.find(dv=>dv.deviceId===deviceId);storage2.set("rememberOutputDevice.device",device),setAudioOutputDevice(device),onPress&&onPress()}},devices.map(device=>React.createElement(TableRadioRow,{key:device.deviceId.toString(),icon:React.createElement(TableRow.Icon,{source:getAudioDeviceIcon(device.simpleDeviceType)}),label:getAudioDeviceDisplayText(device),subLabel:device.deviceName,value:device.deviceId})))),fromVoiceCall&&React.createElement(Stack,{spacing:0},React.createElement(Text,{variant:"text-xs/normal",color:"TEXT_MUTED"},"Missing a few devices from the stock panel? Make a"," ",React.createElement(TextLink,{url:Constants.Repository.FeatureRequestURL},"feature request")," for them!"),React.createElement(Text,{variant:"text-xs/normal",color:"TEXT_MUTED"},"Alternatively, you can swipe up the dock and access the"," ",React.createElement(Text,{variant:"text-xs/bold"},"Change Audio Output")," option.")))))}var{getAudioDevices:_get}=metro.findByPropsLazy("getAudioDevices"),{setAudioOutputDevice:setOutputDevice}=metro.findByPropsLazy("setAudioOutputDevice"),{audioDeviceToIconMap,getAudioDeviceToDisplayText}=metro.findByPropsLazy("audioDeviceToIconMap"),getAudioDevices=()=>_get(),setAudioOutputDevice=device=>setOutputDevice(device),getAudioDeviceIcon=simpleDeviceType=>audioDeviceToIconMap[simpleDeviceType],getAudioDeviceDisplayText=device=>getAudioDeviceToDisplayText(device),showAudioOutputDevicesSelectionSheet=props=>{showActionSheet("better-calls:audio-output-devices-select",Promise.resolve({default:()=>React.createElement(ui.components.ErrorBoundary,null,React.createElement(AudioOutputDevicesSelectionSheet,props))}))},patch$1=(storage2,unpatches2)=>{var VoicePanelHeaderSpeaker=metro.findByTypeNameLazy("VoicePanelHeaderSpeaker");return unpatches2.push(api.patcher.after("type",VoicePanelHeaderSpeaker,args=>{if(args[0].isConnectedToVoiceChannel)return setAudioOutputDevice(storage2.get("rememberOutputDevice.device")),React.createElement(IconButton,{key:"better-calls:silent-call-toggle",icon:getAudioDeviceIcon(storage2.get("rememberOutputDevice.device.simpleDeviceType")),onPress:()=>showAudioOutputDevicesSelectionSheet({storage:storage2,fromVoiceCall:!0}),variant:"primary-overlay",size:"sm"})})),unpatches2},NextPreference={undefined:!0,true:!1,false:void 0},Preferences={undefined:{icon:"BellIcon",description:"Following the global setting for this user",buttonVariant:"tertiary",action:cid=>storage.set(`silentCall.users.${cid}`,!0)},true:{icon:"BellZIcon",description:"Calling will now silently call this user",buttonVariant:"primary",action:cid=>storage.set(`silentCall.users.${cid}`,!1)},false:{icon:"ic_notification_settings_24px",description:"Calling will now ring this user",buttonVariant:"secondary",action:cid=>storage.unset(`silentCall.users.${cid}`)}},patch=(storage2,unpatches2)=>{var callModule=metro.findByPropsLazy("call","ring","stopRinging"),PrivateChannelButtons=metro.findByTypeNameLazy("PrivateChannelButtons");if(!(!callModule||!PrivateChannelButtons))return unpatches2.push(api.patcher.after("type",PrivateChannelButtons,([{channelId}],rt)=>{var[silenced,setSilenced]=React.useState(storage2.get(`silentCall.users.${channelId}`)),key=String(silenced),preference=()=>Preferences[key],fragmentProps=rt?.props?.children?.[0]?.props;fragmentProps?.children&&(fragmentProps.children=[React.createElement(IconButton,{key:"better-calls:silent-call-toggle",icon:api.assets.findAssetId(preference().icon),onPress:()=>{setSilenced(NextPreference[key]);var{description:content,icon,action}=Preferences[String(NextPreference[key])],_$rt=action(channelId);_$rt&&ui.toasts.showToast(content,api.assets.findAssetId(icon))},variant:preference().buttonVariant,size:"sm"}),...fragmentProps.children])})),unpatches2.push(api.patcher.instead("ring",callModule,(args,ring)=>{var silentCall=storage2.getFirstDefined(`silentCall.users.${args[0]}`,"silentCall.default");if(!silentCall)return ring.apply(callModule,args)})),unpatches2},storage=new StorageManager({storage:plugin.storage,initialize(){return plugin.storage.v?{version:1,silentCall:plugin.storage.silentCall,rememberOutputDevice:plugin.storage.rememberOutputDevice}:{version:1,silentCall:{default:!1,enabled:!0,users:{}},rememberOutputDevice:{device:void 0,enabled:!1}}},version:1,migrations:{}}),unpatches={silentCall:[],rememberOutputDevice:[]},index={onLoad:()=>{onModuleStatusUpdate()},onUnload:()=>{for(var unpatch of unpatches.silentCall)unpatch();for(var unpatch1 of unpatches.rememberOutputDevice)unpatch1()},settings:()=>{var[_,forceUpdate]=React.useReducer(x=>~x,0),onUpdate=()=>{onModuleStatusUpdate(),forceUpdate()};return React.createElement(ui.components.ErrorBoundary,null,React.createElement(common.ReactNative.ScrollView,{style:{flex:1},contentContainerStyle:{paddingBottom:38}},React.createElement(Stack,{style:{paddingVertical:24,paddingHorizontal:12},spacing:24},React.createElement(Stack,{spacing:12},React.createElement(TableRowGroup,{title:"Silent Call"},React.createElement(TableSwitchRow,{icon:React.createElement(TableRow.Icon,{source:api.assets.findAssetId("ic_notif_off")}),label:"Enable Silent Call",subLabel:"Silently call someone without ringing, configurable per user.",value:storage.get("silentCall.enabled"),onValueChange:v=>{storage.set("silentCall.enabled",v),onUpdate()}}),React.createElement(TableSwitchRow,{icon:React.createElement(TableRow.Icon,{source:api.assets.findAssetId("ic_call_ended")}),label:"Ring by default",subLabel:"Ring people by default unless you set otherwise. This will affect unset preferences.",value:!storage.get("silentCall.default"),onValueChange:v=>{storage.set("silentCall.default",!v),onUpdate()}}),React.createElement(TableRow,{variant:"danger",icon:React.createElement(TableRow.Icon,{variant:"danger",source:api.assets.findAssetId("ic_message_delete")}),label:"Reset preferences",subLabel:"Reset all silent call preferences, this will make you ring people by default again.",onPress:()=>{storage.set("silentCall.users",{}),common.toasts.open({key:"better-calls:silent-call-reset",content:"Silent call preferences have been reset",icon:api.assets.findAssetId("ic_message_delete")})}})),React.createElement(Text,{variant:"text-xs/normal",color:"TEXT_MUTED"},"You may need to switch between DMs and servers for the changes to take effect. This is because Discord caches rendered components.")),React.createElement(Stack,{spacing:12},React.createElement(TableRowGroup,{title:"Remember Audio Output Device"},React.createElement(TableSwitchRow,{icon:React.createElement(TableRow.Icon,{source:api.assets.findAssetId("voice_bar_speaker_new")}),label:"Remember audio output device",subLabel:"Remembers your audio output device preferences.",value:storage.get("rememberOutputDevice.enabled"),onValueChange:v=>{storage.set("rememberOutputDevice.enabled",v),onUpdate()}}),React.createElement(TableRow,{disabled:!storage.get("rememberOutputDevice.enabled"),icon:React.createElement(TableRow.Icon,{source:getAudioDeviceIcon(storage.get("rememberOutputDevice.device.simpleDeviceType")??"INVALID")}),label:"Current device",subLabel:storage.get("rememberOutputDevice.device")?`${storage.get("rememberOutputDevice.device.deviceName")} - ${getAudioDeviceDisplayText(storage.get("rememberOutputDevice.device"))}`:"No device",arrow:!0,onPress:()=>showAudioOutputDevicesSelectionSheet({onPress:forceUpdate,storage})})),React.createElement(Text,{variant:"text-xs/normal",color:"TEXT_MUTED"},"If your device is not persistent, the first device will be selected after the preferred device is removed."),React.createElement(Text,{variant:"text-xs/normal",color:"TEXT_MUTED"},"This also replaces the audio output device selection sheet which means it may be missing features such as transferring voice chats to a console. If you need those features, let me know by"," ",React.createElement(TextLink,{url:Constants.Repository.FeatureRequestURL},"making a feature request"),"."),React.createElement(Text,{variant:"text-xs/normal",color:"TEXT_MUTED"},"Alternatively, you can swipe up the dock in the voice call UI and access the"," ",React.createElement(Text,{variant:"text-xs/bold"},"Change Audio Output")," option.")))))}};function onModuleStatusUpdate(_firstRun){var devices=getAudioDevices(),currentDevice=storage.get("rememberOutputDevice.device");if(currentDevice&&devices.some(d=>d.deviceId===currentDevice.deviceId&&d.deviceType===currentDevice.deviceType)||storage.set("rememberOutputDevice.device",devices[0]),storage.get("silentCall.enabled"))unpatches.silentCall.length||patch(storage,unpatches.silentCall);else{for(var unpatch of unpatches.silentCall)unpatch();unpatches.silentCall=[]}if(storage.get("rememberOutputDevice.enabled"))unpatches.rememberOutputDevice.length||patch$1(storage,unpatches.rememberOutputDevice);else{for(var unpatch1 of unpatches.rememberOutputDevice)unpatch1();unpatches.rememberOutputDevice=[]}}return exports.default=index,exports.storage=storage,exports.unpatches=unpatches,Object.defineProperty(exports,"__esModule",{value:!0}),exports})({},bunny.metro,bunny.metro.common,bunny.utils.lazy,bunny.ui,bunny.api,vendetta.plugin);
