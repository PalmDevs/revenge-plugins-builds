(function(exports,plugin){"use strict";var{metro:{findByPropsLazy:findByPropsLazy$2},utils:{lazy:{proxyLazy:proxyLazy$1}}}=bunny,findPropLazy=prop=>proxyLazy$1(()=>findByPropsLazy$2(prop)[prop]),{metro:{findByStoreNameLazy}}=bunny,{resolveSemanticColor,semanticColors}=bunny.ui.color;findByStoreNameLazy("ThemeStore");var TextStyleSheet=findPropLazy("TextStyleSheet"),{metro:{findByProps,findByPropsLazy:findByPropsLazy$1},utils:{lazy:{proxyLazy,lazyDestructure}}}=bunny;proxyLazy(()=>findByPropsLazy$1("useSafeAreaInsets").SafeAreaView);var{Button,IconButton,TableRow,TableRowTrailingText,TableRowGroup,TableSwitchRow,TableSwitch,TableRadioRow,TableRadioGroup,TableCheckbox,TextInput}=findByPropsLazy$1("Button","IconButton","TableRow"),{ActionSheet}=findByProps("ActionSheet");findByProps("ActionSheetRow");var BottomSheetTitleHeader=findPropLazy("BottomSheetTitleHeader");lazyDestructure(()=>findByPropsLazy$1("FormSwitch","FormRadio","FormCheckbox"));function Text(props){var{children,variant,color,style,lineClamp=0}=props;return React.createElement(ReactNative.Text,{...props,style:[variant?TextStyleSheet[variant]:{},color?{color:resolveSemanticColor(semanticColors[color])}:{},style??{}],numberOfLines:lineClamp},children)}function TextLink(props){return React.createElement(Text,{variant:"text-xs/medium",color:"TEXT_LINK",accessible:!0,accessibilityRole:"link",onPress:()=>ReactNative.Linking.openURL(props.url)},props.children)}var Stack=findPropLazy("Stack");findPropLazy("FlashList");var Repository={FeatureRequestURL:"https://github.com/PalmDevs/revenge-plugins/issues/new?assignees=&labels=feature-request&projects=&template=suggestion.yml&title=Plugin+name%3A+Short+description"},Constants={Repository},{metro:{findByPropsLazy}}=bunny,actionSheet=findByPropsLazy("openLazy","hideActionSheet");findPropLazy("showSimpleActionSheet");function showActionSheet(key,sheetObjectOrLazyImportedSheet,props){actionSheet.openLazy(sheetObjectOrLazyImportedSheet,key,{})}function AudioOutputDevicesSelectionSheet({onPress,vstorage:vstorage2,fromVoiceCall}){var devices=getAudioDevices();return React.createElement(ActionSheet,null,React.createElement(ReactNative.View,null,React.createElement(Stack,{spacing:16},React.createElement(BottomSheetTitleHeader,{title:"Select Preferred Audio Output Device"}),React.createElement(Stack,{spacing:12},React.createElement(TableRadioGroup,{title:"Audio Devices",hasIcons:!0,value:vstorage2.rememberOutputDevice.device.deviceId,onChange:dvid=>{var device=devices.find(dv=>dv.deviceId===dvid);vstorage2.rememberOutputDevice.device=device,setAudioOutputDevice(device),onPress&&onPress()}},devices.map(device=>React.createElement(TableRadioRow,{key:device.deviceId.toString(),icon:React.createElement(TableRow.Icon,{source:getAudioDeviceIcon(device.simpleDeviceType)}),label:getAudioDeviceDisplayText(device),subLabel:device.deviceName,value:device.deviceId})))),fromVoiceCall&&React.createElement(Stack,{spacing:0},React.createElement(Text,{variant:"text-xs/normal",color:"TEXT_MUTED"},"Missing a few devices from the stock panel? Make a"," ",React.createElement(TextLink,{url:Constants.Repository.FeatureRequestURL},"feature request")," for them!"),React.createElement(Text,{variant:"text-xs/normal",color:"TEXT_MUTED"},"Alternatively, you can swipe up the dock and access the"," ",React.createElement(Text,{variant:"text-xs/bold"},"Change Audio Output")," option.")))))}var{metro}=bunny,getAudioDevices=()=>{var{getAudioDevices:_get}=metro.findByPropsLazy("getAudioDevices");return _get()},setAudioOutputDevice=device=>{var{setAudioOutputDevice:setAudioOutputDevice2}=metro.findByPropsLazy("setAudioOutputDevice");setAudioOutputDevice2(device)},getAudioDeviceIcon=simpleDeviceType=>{var{audioDeviceToIconMap}=metro.findByPropsLazy("audioDeviceToIconMap");return audioDeviceToIconMap[simpleDeviceType]},getAudioDeviceDisplayText=device=>{var{getAudioDeviceToDisplayText}=metro.findByPropsLazy("getAudioDeviceToDisplayText");return getAudioDeviceToDisplayText(device)},showAudioOutputDevicesSelectionSheet=props=>{showActionSheet("better-calls:audio-output-devices-select",Promise.resolve({default:()=>React.createElement(bunny.ui.components.ErrorBoundary,null,React.createElement(AudioOutputDevicesSelectionSheet,props))}))},patch$1=(vstorage2,unpatches2)=>{var{api,metro:metro2}=bunny,VoicePanelHeaderSpeaker=metro2.findByTypeNameLazy("VoicePanelHeaderSpeaker");return unpatches2.push(api.patcher.after("type",VoicePanelHeaderSpeaker,args=>{if(args[0].isConnectedToVoiceChannel)return setAudioOutputDevice(vstorage2.rememberOutputDevice.device),React.createElement(IconButton,{key:"better-calls:silent-call-toggle",icon:getAudioDeviceIcon(vstorage2.rememberOutputDevice.device.simpleDeviceType),onPress:()=>showAudioOutputDevicesSelectionSheet({vstorage:vstorage2,fromVoiceCall:!0}),variant:"primary-overlay",size:"sm"})})),unpatches2},NextPrefMap={undefined:cid=>(vstorage.silentCall.users[cid]=!0,!0),true:cid=>(vstorage.silentCall.users[cid]=!1,!1),false:cid=>{delete vstorage.silentCall.users[cid]}},PrefStyleMap={undefined:{content:"Following the global setting for this user",icon:"ic_notif",variant:"secondary"},true:{content:"Calling will now silently call this user",icon:"ic_notif_off",variant:"primary"},false:{content:"Calling will now ring this user",icon:"ic_notification_settings_24px",variant:"secondary"}},patch=(vstorage2,unpatches2)=>{var{api,metro:metro2,ui}=bunny,callModule=metro2.findByPropsLazy("call","ring","stopRinging"),PrivateChannelButtons=metro2.findByTypeNameLazy("PrivateChannelButtons");if(!(!callModule||!PrivateChannelButtons))return unpatches2.push(api.patcher.after("type",PrivateChannelButtons,([{channelId}],rt)=>{var[silenced,setSilenced]=React.useState(vstorage2.silentCall.users[channelId]),fragmentProps=rt.props.children[0].props;fragmentProps.children&&(fragmentProps.children=[React.createElement(IconButton,{key:"better-calls:silent-call-toggle",icon:api.assets.findAssetId(PrefStyleMap[String(silenced)].icon),onPress:()=>{var newPref=NextPrefMap[String(silenced)](channelId);setSilenced(newPref);var toastData=PrefStyleMap[String(newPref)];ui.toasts.showToast(toastData.content,api.assets.findAssetId(toastData.icon))},variant:PrefStyleMap[String(silenced)].variant,size:"sm"}),...fragmentProps.children])})),unpatches2.push(api.patcher.instead("ring",callModule,(args,ring)=>{var silentCall=vstorage2.silentCall.users[args[0]]??vstorage2.silentCall.default;if(!silentCall)return ring.apply(callModule,args)})),unpatches2},vstorage=plugin.storage,unpatches={silentCall:[],rememberOutputDevice:[]},index={onLoad:()=>{onModuleStatusUpdate()},onUnload:()=>{for(var unpatch of unpatches.silentCall)unpatch();for(var unpatch1 of unpatches.rememberOutputDevice)unpatch1()},settings:()=>{var{api:{assets},metro:{common:{toasts}},ui}=bunny,[_,forceUpdate]=React.useReducer(x=>~x,0),onUpdate=()=>{onModuleStatusUpdate(),forceUpdate()};return React.createElement(ui.components.ErrorBoundary,null,React.createElement(ReactNative.ScrollView,{style:{flex:1},contentContainerStyle:{paddingBottom:38}},React.createElement(Stack,{style:{paddingVertical:24,paddingHorizontal:12},spacing:24},React.createElement(Stack,{spacing:12},React.createElement(TableRowGroup,{title:"Silent Call"},React.createElement(TableSwitchRow,{icon:React.createElement(TableRow.Icon,{source:assets.findAssetId("ic_notif_off")}),label:"Enable Silent Call",subLabel:"Silently call someone without ringing, configurable per user.",value:vstorage.silentCall.enabled,onValueChange:v=>{vstorage.silentCall.enabled=v,onUpdate()}}),React.createElement(TableSwitchRow,{icon:React.createElement(TableRow.Icon,{source:assets.findAssetId("ic_call_ended")}),label:"Ring by default",subLabel:"Ring people by default unless you set otherwise. This will affect unset preferences.",value:!vstorage.silentCall.default,onValueChange:v=>{vstorage.silentCall.default=!v,onUpdate()}}),React.createElement(TableRow,{variant:"danger",icon:React.createElement(TableRow.Icon,{variant:"danger",source:assets.findAssetId("ic_message_delete")}),label:"Reset preferences",subLabel:"Reset all silent call preferences, this will make you ring people by default again.",onPress:()=>{vstorage.silentCall.users={},toasts.open({key:"better-calls:silent-call-reset",content:"Silent call preferences have been reset",icon:assets.findAssetId("ic_message_delete")})}})),React.createElement(Text,{variant:"text-xs/normal",color:"TEXT_MUTED"},"You may need to switch between DMs and servers for the changes to take effect. This is because Discord caches rendered components.")),React.createElement(Stack,{spacing:12},React.createElement(TableRowGroup,{title:"Remember Audio Output Device"},React.createElement(TableSwitchRow,{icon:React.createElement(TableRow.Icon,{source:assets.findAssetId("voice_bar_speaker_new")}),label:"Remember audio output device",subLabel:"Remembers your audio output device preferences.",value:vstorage.rememberOutputDevice.enabled,onValueChange:v=>{vstorage.rememberOutputDevice.enabled=v,onUpdate()}}),React.createElement(TableRow,{disabled:!vstorage.rememberOutputDevice.enabled,icon:React.createElement(TableRow.Icon,{source:getAudioDeviceIcon(vstorage.rememberOutputDevice.device.simpleDeviceType??"INVALID")}),label:"Current device",subLabel:vstorage.rememberOutputDevice.device?`${vstorage.rememberOutputDevice.device.deviceName} - ${getAudioDeviceDisplayText(vstorage.rememberOutputDevice.device)}`:"No device",arrow:!0,onPress:()=>showAudioOutputDevicesSelectionSheet({onPress:forceUpdate,vstorage})})),React.createElement(Text,{variant:"text-xs/normal",color:"TEXT_MUTED"},"If your device is not persistent, the first device will be selected after the preferred device is removed."),React.createElement(Text,{variant:"text-xs/normal",color:"TEXT_MUTED"},"This also replaces the audio output device selection sheet which means it may be missing features such as transferring voice chats to a console. If you need those features, let me know by"," ",React.createElement(TextLink,{url:Constants.Repository.FeatureRequestURL},"making a feature request"),"."),React.createElement(Text,{variant:"text-xs/normal",color:"TEXT_MUTED"},"Alternatively, you can swipe up the dock in the voice call UI and access the"," ",React.createElement(Text,{variant:"text-xs/bold"},"Change Audio Output")," option.")))))}};function onModuleStatusUpdate(_firstRun){vstorage.v??(vstorage.v=2),vstorage.silentCall??(vstorage.silentCall={enabled:!0,users:{},default:!1});var devices=getAudioDevices();if(vstorage.rememberOutputDevice??(vstorage.rememberOutputDevice={enabled:!1,device:devices[0]}),devices.some(d=>d.deviceId===vstorage.rememberOutputDevice.device.deviceId&&d.deviceType===vstorage.rememberOutputDevice.device.deviceType)||(vstorage.rememberOutputDevice.device=devices[0]),vstorage.silentCall.enabled)unpatches.silentCall.length||patch(vstorage,unpatches.silentCall);else{for(var unpatch of unpatches.silentCall)unpatch();unpatches.silentCall=[]}if(vstorage.rememberOutputDevice.enabled)unpatches.rememberOutputDevice.length||patch$1(vstorage,unpatches.rememberOutputDevice);else{for(var unpatch1 of unpatches.rememberOutputDevice)unpatch1();unpatches.rememberOutputDevice=[]}}return exports.default=index,exports.unpatches=unpatches,exports.vstorage=vstorage,Object.defineProperty(exports,"__esModule",{value:!0}),exports})({},vendetta.plugin);
